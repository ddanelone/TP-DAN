services:
  pg-dan:
    image: postgres
    container_name: pg-dan-db
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpassword
      POSTGRES_DB: pg-dan
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - productos-net

  pgadmin-dan:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-container
    environment:
      PGADMIN_DEFAULT_EMAIL: mdomingu@gmail.com
      PGADMIN_DEFAULT_PASSWORD: pgdan
    ports:
      - "8032:80"
    depends_on:
      - pg-dan
    networks:
      - productos-net

  ms-productos-svc:
    image: ms-productos-svc:latest
    container_name: ms-productos-svc
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-dan-db:5432/pg-dan
      SPRING_DATASOURCE_USERNAME: pguser
      SPRING_DATASOURCE_PASSWORD: pgpassword
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
    ports:
      - "0:8080"
    depends_on:
      - pg-dan

    networks:
      - productos-net
      - backend-net

  # mongo-dan:
  #   image: mongo
  #   container_name: mongo-dan
  #   restart: always
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - mongo-data:/data/db
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: dan
  #   networks:
  #     - pedidos-net

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8027:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: dan
  #     ME_CONFIG_MONGODB_URL: mongodb://root:dan@mongo-dan:27017/
  #     ME_CONFIG_BASICAUTH: false
  #   depends_on:
  #     - mongo-dan
  #   networks:
  #     - pedidos-net

  # ms-pedidos-svc:
  #   image: ms-pedidos-svc:latest
  #   container_name: ms-pedidos-svc
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   environment:
  #     SPRING_DATA_MONGODB_HOST: mongo-dan
  #     SPRING_DATA_MONGODB_PORT: 27017
  #     SPRING_DATA_MONGODB_DATABASE: pedidosdb
  #     SPRING_DATA_MONGODB_USERNAME: root
  #     SPRING_DATA_MONGODB_PASSWORD: dan
  #     SPRING_DATA_MONGODB_URL: mongodb://root:dan@mongo-dan:27017/pedidosdb?authSource=admin
  #     SPRING_RABBITMQ_HOST: rabbitmq
  #     SPRING_RABBITMQ_PORT: 5672

  #   ports:
  #     - "6280:8080"
  #   depends_on:
  #     - mongo-dan

  #   networks:
  #     - pedidos-net
  #     - backend-net

networks:
  backend-net:
    external: true
  productos-net:
    driver: bridge
  pedidos-net:
    driver: bridge

volumes:
  pg-data:
  # mongo-data:
